$color-primary: #013D73;
$color-blue-2: #003C73;
$color-blue-3: #1e7cd0;
$color-blue-4: #5D9DD7;
$color-blue-main: #4fabba;
$color-blue-button: #4fabba;

$color-lightblue: #B9D0E5;
$color-lightblue2: #E7EDF2;
$color-black: #333;
$color-white: #fff;
$color-gray: #F5F5F5;
$color-gray2: #bdbdbd;

// 使ってる
$color-dark: #00282e;

$font-japanese: 'Noto Sans JP', "Yu Gothic Medium", "游ゴシック Medium", YuGothic, "游ゴシック体", sans-serif;
$font-english: 'nobel-bold', 'Noto Sans JP', sans-serif, 'Lato', sans-serif;
$font-english-regular: 'Nobel-Regular', 'Noto Sans JP', sans-serif, 'Lato', sans-serif;
$font-number: 'Roboto Condensed', sans-serif;

// responsive
$mobile: 768px;
$pc: 950px;

$media: (
  'sp': 768px,
  'pc': 950px,
  'print': .8,
);

@mixin mq($type: sp, $rule: null) {
  @if $type == sp or $type == pc {
    @if ($type == sp and ($rule == max or $rule == null)) or ($type == pc and ($rule == max)) {
      $rule: max;
    } @else {
      $rule: min;
    }
    $breakpoint: map-get($media, $type);
    @if $rule == max {
      $breakpoint: $breakpoint - 1;
    }
    @media screen and (#{$rule}-width: $breakpoint) {
      @content;
    }
  } @else if $type == tb {
    $min_breakpoint: map-get($media, sp);
    $max_breakpoint: map-get($media, pc) - 1;

    @media screen and (min-width: $min_breakpoint) and (max-width: $max_breakpoint) {
      @content;
    }
  } @else if $type == xs {
    @media screen and (max-width: 374px) {
      @content;
    }
  }
}

@function get_vw($size, $viewport:375){
  @return ( 100 / $viewport ) * $size * 1vw;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.box_base:after {
  position: absolute;
  content: '';
  display: inline-block;
  z-index: 0;
}
.box_red:after {
  background-color: #ED644C;
}
.box_light_blue:after {
  background-color: #4FABBA;
}
.box_blue:after {
  background-color: #4C83ED;
}
.box_brown:after {
  background-color: #C39682;
}
.box_grey:after {
  background-color: #454A54;
}
